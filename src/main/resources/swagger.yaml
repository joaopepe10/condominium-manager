openapi: 3.0.3
info:
  title: Condominium management
  description: Basic CRUD operations for persist data about the condominium management
  version: 1.0.0
servers:
  - url: http://localhost:8080
tags:
  - name: Condominium management
    description: Basic CRUD operations for persist data about the condominium management
paths:
  /users:
    post:
      tags:
        - user
      summary: Create user
      description: Create a new user.
      operationId: createUser
      requestBody:
        description: User to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: New resident added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad request
  /login:
    post:
      tags:
        - login
      summary: Login user
      description: Login with username and password
      operationId: login
      requestBody:
        description: Login of the user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: New resident added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '400':
          description: Bad request
  /apartments/send-proof/{apartmentNumber}:
    post:
      summary: "Upload de comprovante de pagamento"
      parameters:
        - name: "apartmentNumber"
          in: "path"
          required: true
          description: "Número do apartamento para o qual o comprovante será enviado"
          schema:
            type: string
      description: Send payment proof
      operationId: sendProofPayment
      requestBody:
        description: Send image where it is the payment proof
        required: true
        content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  fileProof:
                    type: string
                    format: binary
                  description:
                    type: string

      responses:
        '200':
          description: Proof sent successfully!
        '204':
          description: Proof sent successfully!
        '500':
          description: Error sending the receipt
  /budgets:
    post:
      tags:
        - budget
      summary: New budget
      description: Offering new budgets
      operationId: createBudget
      requestBody:
        description: Budget to be approve
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BudgetRequest'
      responses:
        '204':
          description: Budget proposal created successfully
        '400':
          description: Error when trying to create a new quote
    get:
      tags:
        - get all budgets
      summary: Find all budgets
      description: Search all budgets proposals
      operationId: findAll
      responses:
        '200':
          description: Search successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BudgetsResponse'

components:
  schemas:
    ErrorMessage:
      type: string

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: JoaoPepe22
        password:
          type: string
          example: 123456
    UserRequest:
      type: object
      required:
        - username
        - password
        - name
        - email
        - phoneNumber
        - apartmentNumber
      properties:
        username:
          type: string
          example: JoaoPepe22
        password:
          type: string
          example: 123456
        name:
          type: string
          example: Germano
        email:
          type: string
          example: wanderleco@panelas.pressao
        phoneNumber:
          type: string
          example: (31) 9 0420-0420
        apartmentNumber:
          type: string
          example: 7
    UserResponse:
      type: object
      properties:
        id:
          type: string
          example: f0822b54-0720-11ee-be56-0242ac120002
        name:
          type: string
          example: Germano
        email:
          type: string
          example: wanderleco@panelas.pressao
        phoneNumber:
          type: string
          example: (31) 9 0420-0420
        apartmentNumber:
          type: string
          example: 7
    BudgetRequest:
      type: object
      required:
        - description
        - value
      properties:
        description:
          type: string
          example: Pintar fachada do prédio
        value:
          type: number
          example: 2500.00

    BudgetsResponse:
      type: object
      properties:
        id:
          type: string
          example: f0822b54-0720-11ee-be56-0242ac120002
        descprition:
          type: string
          example: Pintar fachada do prédio.
        value:
          type: number
          example: 2500.00
        approved:
          type: boolean
          example: true/false
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
